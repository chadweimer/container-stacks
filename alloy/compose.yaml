configs:
  alloy_config:
    content: |
      logging {
        level  = "info"
        format = "logfmt"
      }


      // --- Metrics ---

      discovery.docker "prometheus" {
        host = "tcp://docker-proxy:2375"

        filter {
          name   = "label"
          values = ["prometheus.port"]
        }
      }

      discovery.relabel "docker_prometheus" {
        targets = discovery.docker.prometheus.targets

        rule {
          source_labels = ["__meta_docker_container_label_com_docker_compose_service", "__meta_docker_container_label_prometheus_port"]
          separator     = "@"
          regex         = "(.+)@(.+)"
          target_label  = "__address__"
          replacement   = "$${1}:$${2}"
        }

        rule {
          regex  = "__meta_docker_container_label_prometheus_label_(.+)"
          action = "labelmap"
        }
      }

      prometheus.exporter.unix "host" {
        procfs_path = "/host/proc"
        rootfs_path = "/host"
        sysfs_path  = "/host/sys"
      }

      prometheus.scrape "host" {
        targets    = prometheus.exporter.unix.host.targets
        forward_to = [prometheus.relabel.host.receiver]
        job_name   = "host"
      }

      prometheus.relabel "host" {
        rule {
          target_label = "instance"
          replacement  = "truenas-server"
        }

        forward_to = [prometheus.remote_write.default.receiver]
      }

      prometheus.scrape "docker" {
        targets    = discovery.relabel.docker_prometheus.output
        forward_to = [prometheus.remote_write.default.receiver]
        job_name   = "docker"
      }

      prometheus.scrape "machines" {
        targets = array.concat(
          [{
            __address__ = "${DESKTOP_HOST}:9100",
            instance    = "desktop",
          }],
          [{
            __address__ = "${DESKTOP_HOST}:9882",
            instance    = "desktop",
          }],
        )
        forward_to = [prometheus.remote_write.default.receiver]
        job_name   = "machines"
      }

      prometheus.scrape "pikvm" {
        targets = [{
          __address__ = "${KVM_HOST}",
          instance    = "truenas-server",
        }]
        forward_to   = [prometheus.remote_write.default.receiver]
        job_name     = "pikvm"
        metrics_path = "/api/export/prometheus/metrics"
        scheme       = "https"

        basic_auth {
          username = "${KVM_USERNAME}"
          password = "${KVM_PASSWORD}"
        }

        tls_config {
          insecure_skip_verify = true
        }
      }

      prometheus.remote_write "default" {
        endpoint {
          url  = "http://prometheus:9090/api/v1/write"
        }
      }


      // --- Logs ---

      discovery.docker "container_logs" {
        host = "tcp://docker-proxy:2375"
      }

      discovery.relabel "container_logs" {
        targets = []

        rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
        }

        rule {
          source_labels = ["__meta_docker_container_label_com_docker_compose_project"]
          regex         = "(.+)"
          target_label  = "stack"
        }
      }

      loki.source.docker "container_logs" {
        host          = "tcp://docker-proxy:2375"
        targets       = discovery.docker.container_logs.targets
        forward_to    = [loki.write.default.receiver]
        relabel_rules = discovery.relabel.container_logs.rules
      }

      discovery.relabel "syslog" {
        targets = []

        rule {
          source_labels = ["__syslog_message_hostname"]
          target_label  = "host"
        }

        rule {
          source_labels = ["__syslog_message_hostname"]
          target_label  = "hostname"
        }

        rule {
          source_labels = ["__syslog_message_hostname"]
          regex         = "^nas$"
          target_label  = "instance"
          replacement   = "truenas-server"
        }

        rule {
          source_labels = ["__syslog_message_severity"]
          target_label  = "level"
        }

        rule {
          source_labels = ["__syslog_message_app_name"]
          target_label  = "application"
        }

        rule {
          source_labels = ["__syslog_message_facility"]
          target_label  = "facility"
        }

        rule {
          source_labels = ["__syslog_connection_hostname"]
          target_label  = "connection_hostname"
        }
      }

      loki.source.syslog "syslog" {
        listener {
          address      = "0.0.0.0:1514"
          protocol     = "tcp"
          idle_timeout = "0s"
          labels       = {
            job = "syslog",
          }
          max_message_length = 0
        }
        forward_to    = [loki.write.default.receiver]
        relabel_rules = discovery.relabel.syslog.rules
      }

      loki.write "default" {
        endpoint {
          url = "http://loki:3100/loki/api/v1/push"
        }
        external_labels = {}
      }
networks:
  docker-proxy:
    external: True
  ingress:
    external: True
  observe:
    external: True
services:
  alloy:
    command:
      - 'run'
      - '--server.http.listen-addr=0.0.0.0:80'
      - '--storage.path=/var/lib/alloy/data'
      - '/etc/alloy/config.alloy'
    configs:
      - source: alloy_config
        target: /etc/alloy/config.alloy
    container_name: alloy
    image: grafana/alloy:${ALLOY_IMAGE_TAG:-latest}
    labels:
      homepage.group: Network
      homepage.name: Alloy
      homepage.href: https://${ALLOY_HOST}
      homepage.icon: alloy.png
      traefik.enable: true
      traefik.http.routers.alloy.rule: Host(`${ALLOY_HOST}`)
      traefik.http.routers.alloy.tls.certresolver: myresolver
      traefik.http.routers.alloy.middlewares: 'authelia@docker'
      traefik.http.services.alloy.loadbalancer.server.port: 80
    networks:
      - docker-proxy
      - ingress
      - observe
    ports:
      - '127.0.0.1:1514:1514'
    pull_policy: always
    restart: unless-stopped
    user: "568:568"
    volumes:
      - /:/host:ro
      - /mnt/pool0/containers/alloy:/var/lib/alloy
  cadvisor:
    command:
      - --housekeeping_interval=5s
      - --docker_only=true
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_IMAGE_TAG:-latest}
    labels:
      prometheus.label.instance: truenas-server
      prometheus.port: 8080
    networks:
      - observe
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
  graphite:
    container_name: graphite-exporter
    image: ghcr.io/supporterino/truenas-graphite-to-prometheus:${GRAPHITE_IMAGE_TAG:-latest}
    labels:
      prometheus.label.instance: truenas-server
      prometheus.port: 9108
    networks:
      - observe
    ports:
      - '127.0.0.1:9109:9109'
    pull_policy: always
    restart: unless-stopped
  nut:
    command:
      - '--nut.server=host.docker.internal'
      - '--nut.vars_enable=battery.charge,battery.runtime,battery.voltage,battery.voltage.nominal,input.voltage,input.voltage.nominal,output.voltage,output.voltage.nominal,ups.beeper.status,ups.load,ups.realpower.nominal,ups.status'
    container_name: nut-exporter
    extra_hosts:
      - host.docker.internal:host-gateway
    image: ghcr.io/druggeri/nut_exporter:${NUT_IMAGE_TAG:-latest}
    labels:
      homepage.group: Status
      homepage.icon: nut.png
      homepage.name: UPS
      homepage.widget.metrics[0].format.type: percent
      homepage.widget.metrics[0].label: Battery
      homepage.widget.metrics[0].query: network_ups_tools_battery_charge
      homepage.widget.metrics[1].format.suffix: W
      homepage.widget.metrics[1].format.type: number
      homepage.widget.metrics[1].label: Load
      homepage.widget.metrics[1].query: (network_ups_tools_ups_load / 100) * network_ups_tools_ups_realpower_nominal
      homepage.widget.metrics[2].format.type: duration
      homepage.widget.metrics[2].label: Runtime
      homepage.widget.metrics[2].query: network_ups_tools_battery_runtime
      homepage.widget.type: prometheusmetric
      homepage.widget.url: http://prometheus:9090
      prometheus.label.instance: ups
      prometheus.label.__metrics_path__: /ups_metrics
      prometheus.label.__param_ups: ups
      prometheus.port: 9199
    networks:
      - observe
    pull_policy: always
    restart: unless-stopped
  omada:
    container_name: omada-exporter
    environment:
      OMADA_HOST: ${OMADA_HOST}
      OMADA_PASS: ${OMADA_PASS}
      OMADA_SITE: Home
      OMADA_USER: ${OMADA_USER}
    image: ghcr.io/charlie-haley/omada_exporter:${OMADA_IMAGE_TAG:-latest}
    labels:
      prometheus.label.instance: omada
      prometheus.port: 9202
    networks:
      - observe
    pull_policy: always
    restart: unless-stopped
  speedtest:
    container_name: speedtest-exporter
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://0.0.0.0:9798/"
      timeout: 10s
    image: ghcr.io/miguelndecarvalho/speedtest-exporter:${SPEEDTEST_IMAGE_TAG:-latest}
    labels:
      homepage.group: Status
      homepage.icon: myspeed.png
      homepage.name: Internet
      homepage.widget.metrics[0].format.type: bitrate
      homepage.widget.metrics[0].label: Download
      homepage.widget.metrics[0].query: last_over_time(speedtest_download_bits_per_second[24h])
      homepage.widget.metrics[1].format.type: bitrate
      homepage.widget.metrics[1].label: Upload
      homepage.widget.metrics[1].query: last_over_time(speedtest_upload_bits_per_second[24h])
      homepage.widget.type: prometheusmetric
      homepage.widget.url: http://prometheus:9090
      prometheus.label.instance: truenas-server
      prometheus.label.__scrape_interval__: 1h
      prometheus.label.__scrape_timeout__: 2m
      prometheus.port: 9798
    networks:
      - observe
    pull_policy: always
    restart: unless-stopped
