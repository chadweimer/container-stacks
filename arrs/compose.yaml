name: arrs
networks:
  bitmagnet:
    name: bitmagnet
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.55.0/24
          gateway: 192.168.55.1
  ingress:
    external: True
  observe:
    external: True
services:
  bazarr:
    container_name: bazarr
    environment:
      PUID: 568
      PGID: 568
      TZ: America/Los_Angeles
    image: ghcr.io/linuxserver/bazarr:${BAZARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: Bazarr (Subtitles)
      homepage.href: https://${BAZARR_HOST}
      homepage.icon: bazarr.png
      homepage.widget.type: bazarr
      homepage.widget.url: http://bazarr:6767
      homepage.widget.key: ${BAZARR_API_KEY}
      traefik.enable: true
      traefik.http.routers.bazarr.rule: Host(`${BAZARR_HOST}`)
      traefik.http.routers.bazarr.tls.certresolver: myresolver
      traefik.http.routers.bazarr.middlewares: 'authelia@docker'
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/bazarr:/config
      - /mnt/pool1/media:/data
  bitmagnet:
    command:
      - worker
      - run
      - --all
    container_name: bitmagnet
    depends_on:
      bitmagnet-db:
        condition: service_healthy
      bitmagnet-vpn:
        condition: service_healthy
    image: ghcr.io/bitmagnet-io/bitmagnet:${BITMAGNET_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: bitmagnet
      homepage.href: https://${BITMAGNET_HOST}
      homepage.icon: bitmagnet.png
    environment:
      CLASSIFIER_DELETE_XXX: 'true'
      POSTGRES_HOST: bitmagnet-db
      POSTGRES_PASSWORD: ${BITMAGNET_DB_PASSWORD}
      PROCESSOR_CONCURRENCY: 2
      TMDB_API_KEY: ${TMDB_API_KEY}
    network_mode: 'service:bitmagnet-vpn'
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/bitmagnet/config:/root/.config/bitmagnet
  bitmagnet-db:
    container_name: bitmagnet-db
    environment:
      POSTGRES_PASSWORD: ${BITMAGNET_DB_PASSWORD}
      POSTGRES_DB: bitmagnet
      PGUSER: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "bitmagnet"]
      interval: 10s
      timeout: 30s
      retries: 5
    image: postgres:${BITMAGNET_PG_VERSION}
    networks:
      bitmagnet:
        ipv4_address: 192.168.55.11
    # ports:
    #   - 5432:5432
    pull_policy: always
    restart: unless-stopped
    shm_size: 1g
    volumes:
      - /mnt/pool0/containers/bitmagnet/pg${BITMAGNET_PG_VERSION}:/var/lib/postgresql/data
  bitmagnet-vpn:
    cap_add:
      - NET_ADMIN
    container_name: bitmagnet-vpn
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      VPN_SERVICE_PROVIDER: ${VPN_SERVICE_PROVIDER}
      VPN_TYPE: openvpn
      OPENVPN_USER: ${OPENVPN_USER}
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
      SERVER_COUNTRIES: United States
      TZ: America/Los_Angeles
    image: ghcr.io/qdm12/gluetun:${GLUETUN_IMAGE_TAG:-latest}
    labels:
      prometheus.port: 3333
      traefik.enable: true
      traefik.http.routers.bitmagnet.rule: Host(`${BITMAGNET_HOST}`)
      traefik.http.routers.bitmagnet.tls.certresolver: myresolver
      traefik.http.routers.bitmagnet.middlewares: 'authelia@docker'
      traefik.http.services.bitmagnet.loadbalancer.server.port: 3333
    # Host names must be manually mapped here for bitmagnet to resolve them:
    extra_hosts:
      - "bitmagnet-db:192.168.55.11"
    networks:
      bitmagnet:
        ipv4_address: 192.168.55.10
      ingress:
      observe:
    # ports:
    #   # The bitmagnet ports must be exposed by the gluetun container:
    #   - "3333:3333"
    #   # BitTorrent ports:
    #   - "3334:3334/tcp"
    #   - "3334:3334/udp"
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/bitmagnet/gluetun:/gluetun
  jellyseerr:
    container_name: jellyseerr
    environment:
      PUID: 568
      PGID: 568
      TZ: America/Los_Angeles
    image: ghcr.io/fallenbagel/jellyseerr:${JELLYSEERR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: Jellyseerr (Requests)
      homepage.href: https://${JELLYSEERR_HOST}
      homepage.icon: jellyseerr.png
      homepage.widget.type: jellyseerr
      homepage.widget.url: http://jellyseerr:5055
      homepage.widget.key: ${JELLYSEERR_API_KEY}
      traefik.enable: true
      traefik.http.routers.jellyseerr.rule: Host(`${JELLYSEERR_HOST}`)
      traefik.http.routers.jellyseerr.tls.certresolver: myresolver
      traefik.http.routers.jellyseerr.middlewares: 'authelia@docker'
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/jellyseerr:/app/config
  prowlarr:
    container_name: prowlarr
    environment:
      PUID: 568
      PGID: 568
      TZ: America/Los_Angeles
    image: ghcr.io/linuxserver/prowlarr:${PROWLARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: Prowlarr (Indexers)
      homepage.href: https://${PROWLARR_HOST}
      homepage.icon: prowlarr.png
      homepage.widget.type: prowlarr
      homepage.widget.url: http://prowlarr:9696
      homepage.widget.key: ${PROWLARR_API_KEY}
      traefik.enable: true
      traefik.http.routers.prowlarr.rule: Host(`${PROWLARR_HOST}`)
      traefik.http.routers.prowlarr.tls.certresolver: myresolver
      traefik.http.routers.prowlarr.middlewares: 'authelia@docker'
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/prowlarr:/config
  radarr:
    container_name: radarr
    environment:
      PUID: 568
      PGID: 568
      TZ: America/Los_Angeles
    image: ghcr.io/linuxserver/radarr:${RADARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: Radarr (Movies)
      homepage.href: https://${RADARR_HOST}
      homepage.icon: radarr.png
      homepage.widget.type: radarr
      homepage.widget.url: http://radarr:7878
      homepage.widget.key: ${RADARR_API_KEY}
      homepage.widget.enableQueue: true
      traefik.enable: true
      traefik.http.routers.radarr.rule: Host(`${RADARR_HOST}`)
      traefik.http.routers.radarr.tls.certresolver: myresolver
      traefik.http.routers.radarr.middlewares: 'authelia@docker'
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/radarr:/config
      - /mnt/pool1/media:/data
  sonarr:
    container_name: sonarr
    environment:
      PUID: 568
      PGID: 568
      TZ: America/Los_Angeles
    image: ghcr.io/linuxserver/sonarr:${SONARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: Sonarr (Shows)
      homepage.href: https://${SONARR_HOST}
      homepage.icon: sonarr.png
      homepage.widget.type: sonarr
      homepage.widget.url: http://sonarr:8989
      homepage.widget.key: ${SONARR_API_KEY}
      homepage.widget.enableQueue: true
      traefik.enable: true
      traefik.http.routers.sonarr.rule: Host(`${SONARR_HOST}`)
      traefik.http.routers.sonarr.tls.certresolver: myresolver
      traefik.http.routers.sonarr.middlewares: 'authelia@docker'
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/sonarr:/config
      - /mnt/pool1/media:/data
  transmission:
    container_name: transmission
    depends_on:
      transmission-vpn:
        condition: service_healthy
    environment:
      TZ: America/Los_Angeles
    image: ghcr.io/linuxserver/transmission:${TRANSMISSION_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.name: Transmission (Downloads)
      homepage.href: https://${TRANSMISSION_HOST}
      homepage.icon: transmission.png
      homepage.widget.type: transmission
      homepage.widget.url: http://transmission-vpn:9091
    network_mode: 'service:transmission-vpn'
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/transmission/config:/config
      - /mnt/pool1/media/torrents:/data/torrents
  transmission-vpn:
    cap_add:
      - NET_ADMIN
    container_name: transmission-vpn
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      VPN_SERVICE_PROVIDER: ${VPN_SERVICE_PROVIDER}
      VPN_TYPE: openvpn
      OPENVPN_USER: ${OPENVPN_USER}
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
      SERVER_COUNTRIES: United States
      TZ: America/Los_Angeles
    image: ghcr.io/qdm12/gluetun:${GLUETUN_IMAGE_TAG:-latest}
    labels:
      traefik.enable: true
      traefik.http.routers.transmission.rule: Host(`${TRANSMISSION_HOST}`)
      traefik.http.routers.transmission.tls.certresolver: myresolver
      traefik.http.routers.transmission.middlewares: 'authelia@docker'
      traefik.http.services.transmission.loadbalancer.server.port: 9091
    networks:
      - ingress
    # ports:
    #   - 9091:9091 # Transmission UI
    #   - 51413:51413 # Transmission service
    #   - 51413:51413/udp # Transmission service
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/transmission/gluetun:/gluetun
