name: arrs
networks:
  ingress:
    external: true
  observe:
    external: true
services:
  bazarr:
    container_name: bazarr
    environment:
      PGID: 568
      PUID: 568
      TZ: America/Los_Angeles
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: 'wget --spider -q --tries=1 http://0.0.0.0:6767'
      timeout: 30s
    image: ghcr.io/linuxserver/bazarr:${BAZARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.href: https://${BAZARR_HOST}
      homepage.icon: bazarr.png
      homepage.name: Bazarr (Subtitles)
      homepage.widget.key: ${BAZARR_API_KEY}
      homepage.widget.type: bazarr
      homepage.widget.url: http://bazarr:6767
      traefik.enable: true
      traefik.http.routers.bazarr.middlewares: 'authelia@docker'
      traefik.http.routers.bazarr.rule: Host(`${BAZARR_HOST}`)
      traefik.http.routers.bazarr.tls.certresolver: myresolver
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/bazarr:/config
      - /mnt/pool1/media:/data
  jellyseerr:
    container_name: jellyseerr
    environment:
      PGID: 568
      PUID: 568
      TZ: America/Los_Angeles
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: 'wget --spider -q --tries=1 http://0.0.0.0:5055/status'
      timeout: 30s
    image: ghcr.io/fallenbagel/jellyseerr:${JELLYSEERR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.href: https://${JELLYSEERR_HOST}
      homepage.icon: jellyseerr.png
      homepage.name: Jellyseerr (Requests)
      homepage.widget.key: ${JELLYSEERR_API_KEY}
      homepage.widget.type: jellyseerr
      homepage.widget.url: http://jellyseerr:5055
      traefik.enable: true
      traefik.http.routers.jellyseerr.middlewares: 'authelia@docker'
      traefik.http.routers.jellyseerr.rule: Host(`${JELLYSEERR_HOST}`)
      traefik.http.routers.jellyseerr.tls.certresolver: myresolver
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/jellyseerr:/app/config
  prowlarr:
    container_name: prowlarr
    environment:
      PGID: 568
      PUID: 568
      TZ: America/Los_Angeles
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: 'wget --spider -q --tries=1 http://0.0.0.0:9696/ping'
      timeout: 30s
    image: ghcr.io/linuxserver/prowlarr:${PROWLARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.href: https://${PROWLARR_HOST}
      homepage.icon: prowlarr.png
      homepage.name: Prowlarr (Indexers)
      homepage.widget.key: ${PROWLARR_API_KEY}
      homepage.widget.type: prowlarr
      homepage.widget.url: http://prowlarr:9696
      traefik.enable: true
      traefik.http.routers.prowlarr.middlewares: 'authelia@docker'
      traefik.http.routers.prowlarr.rule: Host(`${PROWLARR_HOST}`)
      traefik.http.routers.prowlarr.tls.certresolver: myresolver
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/prowlarr:/config
  radarr:
    container_name: radarr
    environment:
      PGID: 568
      PUID: 568
      TZ: America/Los_Angeles
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: 'wget --spider -q --tries=1 http://0.0.0.0:7878/ping'
      timeout: 30s
    image: ghcr.io/linuxserver/radarr:${RADARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.href: https://${RADARR_HOST}
      homepage.icon: radarr.png
      homepage.name: Radarr (Movies)
      homepage.widget.enableQueue: true
      homepage.widget.key: ${RADARR_API_KEY}
      homepage.widget.type: radarr
      homepage.widget.url: http://radarr:7878
      traefik.enable: true
      traefik.http.routers.radarr.middlewares: 'authelia@docker'
      traefik.http.routers.radarr.rule: Host(`${RADARR_HOST}`)
      traefik.http.routers.radarr.tls.certresolver: myresolver
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/radarr:/config
      - /mnt/pool1/media:/data
  sonarr:
    container_name: sonarr
    environment:
      PGID: 568
      PUID: 568
      TZ: America/Los_Angeles
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: 'wget --spider -q --tries=1 http://0.0.0.0:8989/ping'
      timeout: 30s
    image: ghcr.io/linuxserver/sonarr:${SONARR_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.href: https://${SONARR_HOST}
      homepage.icon: sonarr.png
      homepage.name: Sonarr (Shows)
      homepage.widget.enableQueue: true
      homepage.widget.key: ${SONARR_API_KEY}
      homepage.widget.type: sonarr
      homepage.widget.url: http://sonarr:8989
      traefik.enable: true
      traefik.http.routers.sonarr.middlewares: 'authelia@docker'
      traefik.http.routers.sonarr.rule: Host(`${SONARR_HOST}`)
      traefik.http.routers.sonarr.tls.certresolver: myresolver
    networks:
      - ingress
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/sonarr:/config
      - /mnt/pool1/media:/data
  transmission:
    container_name: transmission
    depends_on:
      transmission-vpn:
        condition: service_healthy
    environment:
      TZ: America/Los_Angeles
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: 'wget --spider -q --tries=1 http://0.0.0.0:9091'
      timeout: 30s
    image: ghcr.io/linuxserver/transmission:${TRANSMISSION_IMAGE_TAG:-latest}
    labels:
      homepage.group: Media
      homepage.href: https://${TRANSMISSION_HOST}
      homepage.icon: transmission.png
      homepage.name: Transmission (Downloads)
      homepage.widget.type: transmission
      homepage.widget.url: http://transmission-vpn:9091
    network_mode: 'service:transmission-vpn'
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/transmission/config:/config
      - /mnt/pool1/media/torrents:/data/torrents
  transmission-vpn:
    cap_add:
      - NET_ADMIN
    container_name: transmission-vpn
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
      OPENVPN_USER: ${OPENVPN_USER}
      SERVER_COUNTRIES: United States
      TZ: America/Los_Angeles
      VPN_SERVICE_PROVIDER: ${VPN_SERVICE_PROVIDER}
      VPN_TYPE: openvpn
    image: ghcr.io/qdm12/gluetun:${GLUETUN_IMAGE_TAG:-latest}
    labels:
      traefik.enable: true
      traefik.http.routers.transmission.middlewares: 'authelia@docker'
      traefik.http.routers.transmission.rule: Host(`${TRANSMISSION_HOST}`)
      traefik.http.routers.transmission.tls.certresolver: myresolver
      traefik.http.services.transmission.loadbalancer.server.port: 9091
    networks:
      - ingress
    # ports:
    #   - 9091:9091 # Transmission UI
    #   - 51413:51413 # Transmission service
    #   - 51413:51413/udp # Transmission service
    pull_policy: always
    restart: unless-stopped
    volumes:
      - /mnt/pool0/containers/transmission/gluetun:/gluetun
